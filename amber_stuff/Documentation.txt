
Syntax
	This Document
		I
			I - an interger (whole number)
		B 
			B - a binary string
			A series of 1s and 0s followed by a b
		R1/2
			R1/2 - a register
			Either an immutable register ($IN or $OUT) or a mutable register ($A - $F)
		LBL
			LBL - a label that appears in the code
			Labels are a string of characters, followed by a colon (:) used by Jump commands as iniecators of where to jump to.
		CMP
			CMP - a comparator
			Operators (explained in Jumps/Comparators) used to compare 2 values
	MV
		Move - [MV R1/I/B R2]
		Moves the value one register, interger or binary string into another register
		E.g. MV 5 $A, $A is now 5
		E.g.(cont) MV $A $B, $B is now 5		
	Registers
		IN
			IN - $IN
			The IN register is an immutable register which stores any value passed into the function
			IN1, IN2 and IN3 will also appear, these are all immutable register 
		OUT
			OUT - $OUT
			The OUT register is a mutable register which you will pass your answers to. 
			These must have the correct values to successfully hack the device.
			OUT1, OUT2, and OUT3 also appear, all are mutable registers that must have the correct values to successfully hack the device 
		A to F
			A-F - $A, $B, $C, $D, $E and $F
			All letter registers are mutable registers used as intermediates in the code.
			These can be used to store values and do math between the $IN and $OUT registers
	Labels
		Label e.g. JUMP_HERE:
		Labels are a string of characters, followed by a colon (:) used by Jump commands as iniecators of where to jump to.
	Comments
		Comment e.g. #This is a comment
		Text following a octothorpe(#), is ignored as code but can be useful to tell you or others what code does 
Math
	ADD
		ADD [ADD R1/I R2]
		Adds the value of R1 or I to the value of R2, and stores it in R2
		E.g. where $A = 4, ADD 5 $A makes $A = 9
	SUB
		SUB [SUB R1/I R2]
		Subtracts the value of R1 or I from the value of R2, and stores it in R2
		E.g. where $A = 5, SUB 4 $A makes $A = 1
	MUL
		MUL [MUL R1/I R2]
		Multiplies the value of R1 or I by the value of R2, and stores it in R2
		E.g. where $A = 3, MUL 5 $A makes $A = 15	
	DIV
		DIV [ADD R1/I R2]
		Divides the value of R1 or I by the value of R2, and stores it in R2
		This is interger division, meaning that the value stored in R2 is rounded down to the nearest interger
		E.g. where $A = 12, DIV 5 $A makes $A = 2
Bitwise	
	AND
		AND [AND R1/B,R2]
		Bitwise Operation
		Compares the bits of one binary string to another
		For each bit location, if both of the compared bits are a 1, return 1 at that location
		Example: where $C = 1101b, AND 1001b $C makes $C = 1001b
		TODO HTML Truth table
	OR
		OR [OR R1/B,R2]
		Bitwise Operation
		Compares the bits of one binary string to another
		For each bit location, if one of the compared bits is a 1, return 1 at that location
		Example: where $C = 1101b, OR 1001b $C makes $C = 1101b
		TODO HTML Truth table
	XOR
		XOR [XOR R1/B,R2]
		Bitwise Operation
		Compares the bits of one binary string to another
		For each bit location, if only one of the compared bits is a 1 (the bits are different), return 1 at that location
		Example: where $C = 1101b, XOR 1001b $C makes $C = 0100b
		TODO HTML Truth table
	NAND
		NAND [NAND R1/B,R2]
		Bitwise Operation
		Compares the bits of one binary string to another
		For each bit location, if only one or neither of the compared bits are a 1, return 1 at that location
		Example: where $C = 1101b, NAND 1001b $C makes $C = 0110b
		TODO HTML Truth table
	NOR
		NOR [NOR R1/B,R2]
		Bitwise Operation
		Compares the bits of one binary string to another
		For each bit location, if both the bits are 0's, return 1 at that location
		Example: where $C = 1101b, NAND 1001b $C makes $C = 0010b
		TODO HTML Truth table
	NXOR
		XOR [XOR R1/B,R2]
		Bitwise Operation
		Compares the bits of one binary string to another
		For each bit location, if both bits are the same(either both 0 or both 1), return 1 at that location
		Example: where $C = 1101b, XOR 1001b $C makes $C = 1011b
		TODO HTML Truth table
	Binary
		Binary strings are a series of 0s and 1s followed by a lower-case b
		Bitwise operations can only be used on binary strings
Jumps
	Jump
		Jump [JMP LBL]
		Move from the line number of the Jump command to the line number of the called label, then executes normaly 
		E.g. JMP JUMP_HERE goes to the line JUMP_HERE: is located on, then executes all code under it
	Conditional Jump 
		Conditional Jump [JMPF R1/I/B CMP R2/I/B LBL]
		If the comparison is true, act as a normal Jump
		If the comparison is false, ignore the Jump command and continue to execute code below 
		See Comparators for more information about whether a comparison will be true or false
		E.g. where $B = 6, JMPF 6 > $B JUMP_HERE does not result in a Jump to JUMP_HERE
		E.g. where $B = 6, JMPF 6 >= $B JUMP_HERE results in a Jump to JUMP_HERE
	Comparators
		<
			< - Less than
			If the value left of the operator is less than the value of the right value, return true
			If the value left of the operator is greater than or equal to the value of the right value, return false
			E.g. 4 < 5 is true, 4 < 4 is false
		>
			> - Greater than
			If the value left of the operator is greater than the value of the right value, return true
			If the value left of the operator is less than or equal to the value of the right value, return false
			E.g. 6 > 5 is true, 5 > 5 is false
		<=
			<= - Less than or equal to
			If the value left of the operator is less than or equal to the value of the right value, return true
			If the value left of the operator is greater than the value of the right value, return false
			E.g. 4 <= 5 is true, 4 <= 4 is true
		>=
			>= - Greater than or equal to
			If the value left of the operator is greater than or equal to the value of the right value, return true
			If the value left of the operator is less than the value of the right value, return false
			E.g. 6 <= 5 is true, 5 <= 5 is true
		==
			== - Equal to
			If the values on the left and right are the same, return true
			If the values on the left and right are not the same, return false
			E.g. 5 == 5 is true, 6 == 5 is false
		!=
			== - Not equal to
			If the values on the left and right are not the same, return true
			If the values on the left and right are the same, return false
			E.g. 6 == 5 is true, 5 == 5 is true
			